) {
break()
}
}
database_deepfaked_videos <- database_deepfaked_videos %>%
dplyr::mutate(
session=str_sub(session, end=i),
observation=str_sub(observation, end=i))
rm(i, count_unique, information_preserved)
database_deepfaked_videos_full <- database_deepfaked_videos %>%
dplyr::filter(payload == 'full')
if (nrow(database_deepfaked_videos_full) > 0) {
database_deepfaked_videos_full %>%
group_by(observation, id) %>%
do(
{ map_dfr(.$data, parseJSON) } %>%
bind_rows()
) %>%
ungroup() %>%
select(-id) -> database_deepfaked_videos_full
}
database_deepfaked_videos %>%
dplyr::filter(payload %in% c('incremental', 'latest')) %>%
group_by(observation, id) %>%
do(
{ map_dfr(.$data, parseJSON) } %>%
bind_rows()
) %>%
ungroup() %>%
select(-id) -> database_deepfaked_videos_incremental
gc()
##Merge data sets
#For analysis, we'll use the full data sets where available, and incremental data when it is the the only information we have for a user.
raw_data_deepfaked_videos <- database_deepfaked_videos_full %>%
bind_rows(
database_deepfaked_videos_incremental %>%
filter(!(observation %in% database_deepfaked_videos_full$observation))) %>%
type_convert()
gc()
# rename the observation column to subject
raw_data_deepfaked_videos <- raw_data_deepfaked_videos %>%
rename(subject = observation)
# Ensures that all cells contain the same value even if only a subset of those cells is currently filled
raw_data_deepfaked_video %>%
group_by(subject) %>%
fill(matches('code'), .direction='down') %>%
fill(matches('code'), .direction='up') %>%
ungroup() -> raw_data_deepfaked_videos
# Ensures that all cells contain the same value even if only a subset of those cells is currently filled
raw_data_deepfaked_videos %>%
group_by(subject) %>%
fill(matches('code'), .direction='down') %>%
fill(matches('code'), .direction='up') %>%
ungroup() -> raw_data_deepfaked_videos
rm(database_deepfaked_video, database_deepfaked_video_full, database_deepfaked_video_incremental)
# Create  a backup of the data while I am writing the script so I don't have to work with the database which takes a bunch of time
Raw_Data_deepfake <- raw_data_deepfaked_videos
# Ensures that all cells contain the same value even if only a subset of those cells is currently filled
raw_data_deepfaked_videos %>%
group_by(subject) %>%
fill(matches('code'), .direction='down') %>%
fill(matches('code'), .direction='up') %>%
ungroup() -> raw_data_deepfaked_videos
rm(database_deepfaked_videos, database_deepfaked_videos_full, database_deepfaked_videos_incremental)
# Create  a backup of the data while I am writing the script so I don't have to work with the database which takes a bunch of time
Raw_Data_deepfake <- raw_data_deepfaked_videos
raw_data_genuine_videos <- raw_data_genuine_videos %>%
mutate(video_type = "genuine video")
raw_data_deepfaked_videos <- raw_data_deepfaked_videos %>%
mutate(video_type = "deepfake video")
raw_data_combined <- raw_data_genuine_videos %>%
full_join(raw_data_deepfaked_videos)
View(raw_data_genuine_videos)
View(Raw_Data_genuine)
View(raw_data_genuine_videos)
raw_data_deepfaked_videos <- database_deepfaked_videos_full %>%
bind_rows(
database_deepfaked_videos_incremental %>%
filter(!(observation %in% database_deepfaked_videos_full$observation)))
knitr::opts_chunk$set(message=FALSE,
warning=FALSE)
library(tidyverse)
library(readxl)
library(ggthemes)
library(knitr)
library(kableExtra)
library(IATscores)
library(pacman)
library(RSQLite)
library(jsonlite)
library(janitor)
library(Hmisc)
library(ggplot2)
library(haven)
library(IATscores)
library(xlsx)
# Used to reduce unique ids to a smaller number
count_unique <- function(x) {
return(length(unique(x)))
}
information_preserved <- function(x, length) {
return(
count_unique(str_sub(x, end=i)) ==
count_unique(x)
)
}
# used to extract the JSON data
parseJSON <- function(input) {
return(input %>%
fromJSON(flatten=T) %>% {
# Coerce lists
if (class(.) == 'list') {
discard(., is.null) %>%
as_tibble()
} else {
.
} } %>%
# Sanitize names
janitor::clean_names() %>%
# Use only strings for now, and re-encode types later
mutate_all(as.character))
}
# Github does not play nicely with files > 100mb. So I compressed the data files so they could be uploaded. You need to uncompress them to run the code chunks below
genuine_data <- c("raw/Experiment_5_Genuine_data.zip")
unzip(genuine_data, exdir = "raw")
deepfaked_data <- c("raw/Experiment_5_DF_data.zip")
unzip(deepfaked_data, exdir = "raw")
rm(genuine_data, deepfaked_data)
# 'Connect' to database
connection <- dbConnect(
drv=RSQLite::SQLite(),
dbname= "raw/Experiment_5_Genuine_data.sqlite")
# Extract main table
database_genuine_videos <- dbGetQuery(
conn=connection,
statement='SELECT * FROM labjs')
# Close connection
dbDisconnect(
conn=connection)
# Discard connection
rm(connection)
database_genuine_videos_meta_data <- map_dfr(database_genuine_videos$metadata, fromJSON) %>%
dplyr::rename(observation = id)
database_genuine_videos <- database_genuine_videos %>%
bind_cols(database_genuine_videos_meta_data) %>%
# Remove metadata column
select(-metadata)
# Remove temporary data frame
rm(database_genuine_videos_meta_data)
# Reduce the length of the random id variable to five characters (this is a sufficient length to identify each unique participant)
for (i in 5:36) {
if (
information_preserved(database_genuine_videos$session, i) &&
information_preserved(database_genuine_videos$observation, i)
) {
break()
}
}
database_genuine_videos <- database_genuine_videos %>%
dplyr::mutate(
session=str_sub(session, end=i),
observation=str_sub(observation, end=i))
rm(i, count_unique, information_preserved)
database_genuine_videos_full <- database_genuine_videos %>%
dplyr::filter(payload == 'full')
if (nrow(database_genuine_videos_full) > 0) {
database_genuine_videos_full %>%
group_by(observation, id) %>%
do(
{ map_dfr(.$data, parseJSON) } %>%
bind_rows()
) %>%
ungroup() %>%
select(-id) -> database_genuine_videos_full
}
database_genuine_videos %>%
dplyr::filter(payload %in% c('incremental', 'latest')) %>%
group_by(observation, id) %>%
do(
{ map_dfr(.$data, parseJSON) } %>%
bind_rows()
) %>%
ungroup() %>%
select(-id) -> database_genuine_videos_incremental
gc()
##Merge data sets
#For analysis, we'll use the full data sets where available, and incremental data when it is the the only information we have for a user.
raw_data_genuine_videos <- database_genuine_videos_full %>%
bind_rows(
database_genuine_videos_incremental %>%
filter(!(observation %in% database_genuine_videos_full$observation))) %>%
type_convert()
gc()
# rename the observation column to subject
raw_data_genuine_videos <- raw_data_genuine_videos %>%
rename(subject = observation)
# Ensures that all cells contain the same value even if only a subset of those cells is currently filled
raw_data_genuine_videos %>%
group_by(subject) %>%
fill(matches('code'), .direction='down') %>%
fill(matches('code'), .direction='up') %>%
ungroup() -> raw_data_genuine_videos
rm(database_genuine_videos, database_genuine_videos_full, database_genuine_videos_incremental)
# Create  a backup of the data while I am writing the script so I don't have to work with the database which takes a bunch of time
Raw_Data_genuine <- raw_data_genuine_videos
# 'Connect' to database
connection <- dbConnect(
drv=RSQLite::SQLite(),
dbname= "raw/Experiment_5_DF_data.sqlite")
# Extract main table
database_deepfaked_videos <- dbGetQuery(
conn=connection,
statement='SELECT * FROM labjs')
# Close connection
dbDisconnect(
conn=connection)
# Discard connection
rm(connection)
database_deepfaked_videos_meta_data <- map_dfr(database_deepfaked_videos$metadata, fromJSON) %>%
dplyr::rename(observation = id)
database_deepfaked_videos <- database_deepfaked_videos %>%
bind_cols(database_deepfaked_videos_meta_data) %>%
# Remove metadata column
select(-metadata)
# Remove temporary data frame
rm(database_deepfaked_videos_meta_data)
# Reduce the length of the random id variable to five characters (this is a sufficient length to identify each unique participant)
count_unique <- function(x) {
return(length(unique(x)))
}
information_preserved <- function(x, length) {
return(
count_unique(str_sub(x, end=i)) ==
count_unique(x)
)
}
for (i in 5:36) {
if (
information_preserved(database_deepfaked_videos$session, i) &&
information_preserved(database_deepfaked_videos$observation, i)
) {
break()
}
}
database_deepfaked_videos <- database_deepfaked_videos %>%
dplyr::mutate(
session=str_sub(session, end=i),
observation=str_sub(observation, end=i))
rm(i, count_unique, information_preserved)
database_deepfaked_videos_full <- database_deepfaked_videos %>%
dplyr::filter(payload == 'full')
if (nrow(database_deepfaked_videos_full) > 0) {
database_deepfaked_videos_full %>%
group_by(observation, id) %>%
do(
{ map_dfr(.$data, parseJSON) } %>%
bind_rows()
) %>%
ungroup() %>%
select(-id) -> database_deepfaked_videos_full
}
database_deepfaked_videos %>%
dplyr::filter(payload %in% c('incremental', 'latest')) %>%
group_by(observation, id) %>%
do(
{ map_dfr(.$data, parseJSON) } %>%
bind_rows()
) %>%
ungroup() %>%
select(-id) -> database_deepfaked_videos_incremental
gc()
raw_data_deepfaked_videos <- database_deepfaked_videos_full %>%
bind_rows(
database_deepfaked_videos_incremental %>%
filter(!(observation %in% database_deepfaked_videos_full$observation)))
View(raw_data_deepfaked_videos)
View(Raw_Data_deepfake)
raw_data_deepfaked_videos <- database_deepfaked_videos_full %>%
bind_rows(
database_deepfaked_videos_incremental %>%
filter(!(observation %in% database_deepfaked_videos_full$observation))) %>%
type_convert()
gc()
raw_data_deepfaked_videos <- raw_data_deepfaked_videos %>%
rename(subject = observation)
View(raw_data_deepfaked_videos)
raw_data_genuine_videos <- database_genuine_videos_full %>%
bind_rows(
database_genuine_videos_incremental %>%
filter(!(observation %in% database_genuine_videos_full$observation)))
raw_data_genuine_videos <- database_genuine_videos_full %>%
bind_rows(
database_genuine_videos_incremental %>%
filter(!(observation %in% database_genuine_video_full$observation)))
# 'Connect' to database
connection <- dbConnect(
drv=RSQLite::SQLite(),
dbname= "raw/Experiment_5_Genuine_data.sqlite")
# Extract main table
database_genuine_videos <- dbGetQuery(
conn=connection,
statement='SELECT * FROM labjs')
# Close connection
dbDisconnect(
conn=connection)
# Discard connection
rm(connection)
database_genuine_videos_meta_data <- map_dfr(database_genuine_videos$metadata, fromJSON) %>%
dplyr::rename(observation = id)
database_genuine_videos <- database_genuine_videos %>%
bind_cols(database_genuine_videos_meta_data) %>%
# Remove metadata column
select(-metadata)
# Remove temporary data frame
rm(database_genuine_videos_meta_data)
# Reduce the length of the random id variable to five characters (this is a sufficient length to identify each unique participant)
for (i in 5:36) {
if (
information_preserved(database_genuine_videos$session, i) &&
information_preserved(database_genuine_videos$observation, i)
) {
break()
}
}
# Reduce the length of the random id variable to five characters (this is a sufficient length to identify each unique participant)
count_unique <- function(x) {
return(length(unique(x)))
}
information_preserved <- function(x, length) {
return(
count_unique(str_sub(x, end=i)) ==
count_unique(x)
)
}
for (i in 5:36) {
if (
information_preserved(database_genuine_videos$session, i) &&
information_preserved(database_genuine_videos$observation, i)
) {
break()
}
}
database_genuine_videos <- database_genuine_videos %>%
dplyr::mutate(
session=str_sub(session, end=i),
observation=str_sub(observation, end=i))
rm(i, count_unique, information_preserved)
database_genuine_videos_full <- database_genuine_videos %>%
dplyr::filter(payload == 'full')
if (nrow(database_genuine_videos_full) > 0) {
database_genuine_videos_full %>%
group_by(observation, id) %>%
do(
{ map_dfr(.$data, parseJSON) } %>%
bind_rows()
) %>%
ungroup() %>%
select(-id) -> database_genuine_videos_full
}
database_genuine_videos %>%
dplyr::filter(payload %in% c('incremental', 'latest')) %>%
group_by(observation, id) %>%
do(
{ map_dfr(.$data, parseJSON) } %>%
bind_rows()
) %>%
ungroup() %>%
select(-id) -> database_genuine_videos_incremental
gc()
raw_data_genuine_videos <- database_genuine_videos_full %>%
bind_rows(
database_genuine_videos_incremental %>%
filter(!(observation %in% database_genuine_videos_full$observation)))
View(Raw_Data_genuine)
View(raw_data_genuine_videos)
raw_data_genuine_videos <- database_genuine_videos_full %>%
bind_rows(
database_genuine_videos_incremental %>%
filter(!(observation %in% database_genuine_videos_full$observation))) %>%
type_convert()
View(raw_data_genuine_videos)
raw_data_genuine_videos <- database_genuine_videos_full %>%
bind_rows(
database_genuine_videos_incremental)
raw_data_genuine_videos <- raw_data_genuine_videos %>%
filter(!(observation %in% database_genuine_videos_full$observation)) %>%
as.character(observation)
raw_data_genuine_videos <- raw_data_genuine_videos %>%
filter(!(observation %in% database_genuine_videos_full$observation)) %>%
as.character(raw_data_genuine_videos$observation)
raw_data_genuine_videos <- raw_data_genuine_videos %>%
filter(!(observation %in% database_genuine_videos_full$observation)) %>%
as.character(raw_data_genuine_videos$observation) %>%
type_convert()
raw_data_genuine_videos <- raw_data_genuine_videos %>%
filter(!(observation %in% database_genuine_videos_full$observation)) %>%
is.character(raw_data_genuine_videos$observation)
raw_data_genuine_videos <- raw_data_genuine_videos %>%
filter(!(observation %in% database_genuine_videos_full$observation))
raw_data_genuine_videos <- database_genuine_videos_full %>%
bind_rows(
database_genuine_videos_incremental)
raw_data_genuine_videos <- raw_data_genuine_videos %>%
filter(!(observation %in% database_genuine_videos_full$observation))
database_genuine_videos_incremental) %>%
raw_data_genuine_videos <- database_genuine_videos_full %>%
bind_rows(
database_genuine_videos_incremental) %>%
filter(!(observation %in% database_genuine_videos_full$observation))
database_genuine_videos_incremental) %>%
raw_data_genuine_videos <- database_genuine_videos_full %>%
bind_rows(
database_genuine_videos_incremental) %>%
filter(!(observation %in% database_genuine_videos_full$observation)))
raw_data_genuine_videos <- database_genuine_videos_full %>%
bind_rows(
database_genuine_videos_incremental %>%
filter(!(observation %in% database_genuine_videos_full$observation)))
View(raw_data_genuine_videos)
is.character(raw_data_genuine_videos$observation)
raw_data_genuine_videos %>%
type_convert()
raw_data_genuine_videos <- database_genuine_videos_full %>%
bind_rows(
database_genuine_videos_incremental %>%
filter(!(observation %in% database_genuine_videos_full$observation))) %>%
mutate(observation = as.character(observation))
raw_data_genuine_videos %>%
type_convert()
View(raw_data_genuine_videos)
raw_data_genuine_videos %>%
type_convert()
raw_data_genuine_videos %>%
type_convert(col_types = readr::cols(
observation = col_character()))
observation = col_character())) %>%
raw_data_genuine_videos %>%
type_convert(col_types = readr::cols(
observation = col_character())) %>%
type_convert()
raw_data_genuine_videos %>%
type_convert(-raw_data_genuine_videos$observation)
View(Raw_Data_genuine)
View(raw_data_genuine_videos)
raw_data_genuine_videos <- database_genuine_videos_full %>%
bind_rows(
database_genuine_videos_incremental %>%
filter(!(observation %in% database_genuine_videos_full$observation))) %>%
type_convert()
View(raw_data_genuine_videos)
raw_data_genuine_videos <- raw_data_genuine_videos %>%
rename(subject = observation) %>%
as.character(subject)
as.character(raw_data_genuine_videos$observation)
View(raw_data_deepfaked_videos)
raw_data_genuine_videos <- database_genuine_videos_full %>%
bind_rows(
database_genuine_videos_incremental %>%
filter(!(observation %in% database_genuine_videos_full$observation))) %>%
convert(chr(observation))
library(dplyr)
raw_data_genuine_videos <- database_genuine_videos_full %>%
bind_rows(
database_genuine_videos_incremental %>%
filter(!(observation %in% database_genuine_videos_full$observation))) %>%
convert(chr(observation))
library(hablar)
iinstall.packages(‘hablar’)
install.packages(‘hablar’)
install.packages('hablar')
library(hablar)
raw_data_genuine_videos <- database_genuine_videos_full %>%
bind_rows(
database_genuine_videos_incremental %>%
filter(!(observation %in% database_genuine_videos_full$observation))) %>%
convert(chr(observation))
View(raw_data_genuine_videos)
database_genuine_videos_incremental %>%
filter(!(observation %in% database_genuine_videos_full$observation))) %>%
raw_data_genuine_videos <- database_genuine_videos_full %>%
bind_rows(
database_genuine_videos_incremental %>%
filter(!(observation %in% database_genuine_videos_full$observation))) %>%
convert()
View(raw_data_genuine_videos)
?type_convert
raw_data_genuine_videos <- database_genuine_videos_full %>%
bind_rows(
database_genuine_videos_incremental %>%
filter(!(observation %in% database_genuine_videos_full$observation))) %>%
type_convert(col_types = cols(.default = col_character()))
View(raw_data_genuine_videos)
database_genuine_videos_incremental %>%
filter(!(observation %in% database_genuine_videos_full$observation))) %>%
raw_data_genuine_videos <- database_genuine_videos_full %>%
bind_rows(
database_genuine_videos_incremental %>%
filter(!(observation %in% database_genuine_videos_full$observation))) %>%
type_convert(col_types = cols(.default = col_character())) %>%
type_convert()
View(raw_data_genuine_videos)
raw_data_genuine_videos <- database_genuine_videos_full %>%
bind_rows(
database_genuine_videos_incremental %>%
filter(!(observation %in% database_genuine_videos_full$observation))) %>%
lapply(, as.character)
lapply(raw_data_genuine_videos, as.character)
raw_data_genuine_videos <- database_genuine_videos_full %>%
bind_rows(
database_genuine_videos_incremental %>%
filter(!(observation %in% database_genuine_videos_full$observation)))
glimpse(raw_data_genuine_videos)
