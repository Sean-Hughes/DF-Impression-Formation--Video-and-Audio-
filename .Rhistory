mutate(passed_iat_accuracy_overall = ifelse(iat_accuracy_overall >= .70, TRUE, FALSE)) %>%
select(subject, passed_iat_accuracy_overall)
# exclude if error rate on any one block > 40%
data_iat_accuracy_by_block <- data_iat_cleaned %>%
group_by(subject, block) %>%
summarise(iat_accuracy_by_block = sum(correct)/n()) %>%
ungroup() %>%
mutate(passed_iat_accuracy_by_block = ifelse(iat_accuracy_by_block >= .60, TRUE, FALSE)) %>%
group_by(subject) %>%
summarise(passed_iat_accuracy_by_block = as.logical(min(passed_iat_accuracy_by_block))) %>%
ungroup()
data_iat_fast_responding <- data_iat_cleaned %>%
mutate(fast_response = ifelse(latency < 300, 1, 0)) %>%
group_by(subject) %>%
summarise(iat_percent_fast_responses = sum(fast_response)/n()) %>%
ungroup() %>%
mutate(passed_iat_percent_fast_responses = ifelse(iat_percent_fast_responses <= .10, TRUE, FALSE)) %>%
select(subject, passed_iat_percent_fast_responses)
data_iat_performance <- data_iat_accuracy_overall %>%
full_join(data_iat_accuracy_by_block, by = "subject") %>%
full_join(data_iat_fast_responding, by = "subject") %>%
rowwise() %>%
mutate(passed_iat_performance = as.logical(min(c(passed_iat_accuracy_overall,
passed_iat_accuracy_by_block,
passed_iat_percent_fast_responses), na.rm = TRUE))) %>%
ungroup() %>%
select(subject, passed_iat_performance)
rm(data_iat_accuracy_overall, data_iat_accuracy_by_block, data_iat_fast_responding)
data_iat_D2_scores <- data_iat_cleaned %>%
# rename and recode to create the input format that the IATscores package requires
mutate(praccrit = ifelse(block_type == "incompatibletest1" | block_type == "compatibletest1",
"prac", "crit"),
blockcode = ifelse(block_type == "incompatibletest1" | block_type == "incompatibletest2",
"incompatible_block", "compatible_block")) %>%
select(subject, subject, block, correct, latency, praccrit,  trial_number, block_type) %>%
mutate(blockcode = ifelse(block %in% c(3, 4), "pair1",
ifelse(block %in% c(6, 7), "pair2", NA)),
praccrit = ifelse(block %in% c(3, 6), "prac",
ifelse(block %in% c(4, 7), "crit", NA)))  %>%
filter(!is.na(blockcode)) %>%
# calculate D2 scores
# parameters are identical to those the package lists in the D2 wrapper function
IATscores::RobustScores(IATdata = .,
P1 = "fxtrim",  # Trim values < 400ms
P2 = "ignore",  # do not trim errors
P3 = "dscore",  # calculate d2 scores
P4 = "dist",    # distinguish between the prac and test blocks
verbose = FALSE,
autoremove = FALSE) %>%
rename(IAT_D2_score = p2112)
# Join all the files together for analyses
data_processed <- data_demographics_and_methods %>%
full_join(data_self_reports, by ='subject') %>%
full_join(data_exploratory_questions, by ='subject') %>%
full_join(data_iat_D2_scores, by='subject') %>%
full_join(data_iat_completeness, by='subject') %>%
full_join(data_iat_performance, by='subject')
# Add in numeric ids for participants
unique_ids <- data_processed %>%
distinct(subject) %>%
rownames_to_column(var = "numeric_id") %>%
mutate(numeric_id = as.numeric(as.character(numeric_id)))
data_processed <- data_processed %>%
full_join(unique_ids, by = "subject")
# Order the columns for subsequent analyses
data_processed <- data_processed %>%
mutate(experiment = current_experiment_number) %>%
select(numeric_id,
#subject,
experiment,
gender,
age,
revised_condition,
experiment_condition,
task_order,
IAT_block_order,
complete_iat_data,
passed_iat_performance,
pos_neg,
good_bad,
like_dislike,
self_reported_rating,
IAT_D2_score,
memory_of_video_content,
diagnosticity_question,
demand,
reactance,
hypothesis_awareness,
influence_awareness,
issues_with_study)
# Ensures that the processed data folder exists
dir.create("processed")
# write to disk
write_csv(data_processed, "processed/data_processed.csv")
data <- read_csv("processed/data_processed.csv")
# dependencies -----
library(tidyverse)
library(ggthemes)
library(knitr)
library(kableExtra)
library(broom)
library(effsize)
library(BayesFactor)
library(metafor)
library(ez)
library(schoRsch)
library(nnet)
library(epitools)
options(knitr.kable.NA = "/")
# Ensures that the processed data folder exists
dir.create("models")
dir.create("results")
# functions -----
# round p value using apa format
apa_p_value <- function(p){
p_formatted <- ifelse(p >= 0.0001, paste("=", round(p, 4)),
ifelse(p < 0.0001, "< .0001", NA))
p_formatted <- gsub(pattern = "0.", replacement = ".", x = p_formatted, fixed = TRUE)
p_formatted
}
# calculate cohens d and return its output in tidy format - a helper function for analysis_workflow
tidy_cohens_d <- function(data){
require(effsize)
fit <- effsize::cohen.d(DV ~ IV, data = data)
results <- tibble(cohens_d = fit$estimate,
cohens_d_ci_lower = fit$conf.int["lower"],
cohens_d_ci_upper = fit$conf.int["upper"])
return(results)
}
# calculate cohens d and return its output in tidy format - a helper function for analysis_workflow
tidy_ttest_bf <- function(data){
require(BayesFactor)
fit <- data %>%
ttestBF(formula = DV ~ IV, data = .)
results <- data.frame(bf10 = extractBF(fit)$bf)
return(results)
}
# full analysis workflow
# NB workflow returns mean_reference and mean_comparison, where reference is the first factor level and comparison is the next highest level.
analysis_workflow <- function(data){
# frequentist t test
results_t_test <- data %>%
group_by(experiment, DV_type) %>%
do(broom::tidy(t.test(DV ~ IV, data = .))) %>%
ungroup() %>%
rename(t = statistic,
df = parameter,
p = p.value,
mean_reference = estimate1,
mean_comaprison = estimate2)
# cohens d
results_cohens_d <- data %>%
group_by(experiment, DV_type) %>%
do(tidy_cohens_d(data = .)) %>%
ungroup()
# BF t test
results_bf_t_test <- data %>%
group_by(experiment, DV_type) %>%
do(tidy_ttest_bf(data = .)) %>%
ungroup()
# combine
results <-
full_join(results_t_test,
results_cohens_d,
by = c("experiment", "DV_type")) %>%
full_join(results_bf_t_test,
by = c("experiment", "DV_type")) %>%
select(experiment, DV_type,
mean_reference, mean_comaprison,
t, df, p, cohens_d, cohens_d_ci_lower, cohens_d_ci_upper, bf10) %>%
mutate(reportable_result = paste0("Reference group M = ", round(mean_reference, 2), ", comparison group M = ", round(mean_comaprison, 2), ", t(", round(df, 2), ") = ", round(t, 2), ", p ", apa_p_value(p), ", d = ", round(cohens_d, 2), ", 95% CI [", round(cohens_d_ci_lower, 2), ", ", round(cohens_d_ci_upper, 2), "], BF10 = ", round(bf10, 1)))
return(results)
}
OR_to_d <- function(OR){
log(OR)*(sqrt(3)/pi)
}
# full data
data_processed <-
read_csv("C:/Users/Sean/Desktop/git/Deepfaking/Experiment 1/2. Data/processed/data_processed.csv") %>%
# set factor levels for t test comparisons
mutate(experiment_condition = fct_relevel(experiment_condition,
"Positive Video",
"Negative Video")) %>%
# create compound exclusion variable for IAT data
mutate(exclude_iat = ifelse(complete_iat_data == "complete" &
passed_iat_performance == TRUE,
FALSE, TRUE),
# if exclude variable is missing, then exclude
exclude_iat = ifelse(is.na(exclude_iat), TRUE, exclude_iat)) %>%
# create exclusion variable for missing exploratory question data
mutate(exclude_exploratory = ifelse(is.na(memory_of_video_content), TRUE,
ifelse(is.na(diagnosticity_question), TRUE,
ifelse(is.na(demand), TRUE,
ifelse(is.na(reactance), TRUE,
ifelse(is.na(hypothesis_awareness), TRUE,
ifelse(is.na(influence_awareness), TRUE, FALSE)))))))
# exclusions
data_processed_after_exclusions <- data_processed %>%
filter(exclude_iat == FALSE) %>%
filter(exclude_exploratory == FALSE)
View(data_processed_after_exclusions)
data_processed %>%
group_by(experiment) %>%
summarize(n = n(),
age_mean = mean(age),
age_sd = mean(age),
excluded_n = sum(exclude),
excluded_percent = mean(exclude*100)) %>%
mutate_if(is.numeric, round, digits = 1) %>%
kable(align = "c") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
data_processed %>%
group_by(experiment) %>%
summarize(age_mean = mean(age),
age_sd = mean(age),
excluded_n = sum(exclude),
excluded_percent = mean(exclude*100)) %>%
mutate_if(is.numeric, round, digits = 1) %>%
kable(align = "c") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
data_processed %>%
summarize(n = n(),
age_mean = mean(age),
age_sd = mean(age),
excluded_n = sum(exclude),
excluded_percent = mean(exclude*100)) %>%
mutate_if(is.numeric, round, digits = 1) %>%
kable(align = "c") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
# full data
data_processed <-
read_csv("C:/Users/Sean/Desktop/git/Deepfaking/Experiment 1/2. Data/processed/data_processed.csv") %>%
# set factor levels for t test comparisons
mutate(experiment_condition = fct_relevel(experiment_condition,
"Positive Video",
"Negative Video")) %>%
# create compound exclusion variable for IAT data
mutate(exclude_iat = ifelse(complete_iat_data == "complete" & passed_iat_performance == TRUE,
FALSE, TRUE),
# if exclude variable is missing, then exclude
exclude_iat = ifelse(is.na(exclude_iat), TRUE, exclude_iat)) %>%
# create exclusion variable for missing exploratory question data
mutate(exclude_exploratory = ifelse(is.na(memory_of_video_content), TRUE,
ifelse(is.na(diagnosticity_question), TRUE,
ifelse(is.na(demand), TRUE,
ifelse(is.na(reactance), TRUE,
ifelse(is.na(hypothesis_awareness), TRUE,
ifelse(is.na(influence_awareness), TRUE, FALSE))))))) %>%
mutate(exclude = exclude_iat + exclude_exploratory)
View(data_processed)
# exclusions
data_processed_after_exclusions <- data_processed %>%
filter(exclude == 0)
View(data_processed_after_exclusions)
data_processed %>%
summarize(n = n(),
age_mean = mean(age),
age_sd = mean(age),
excluded_n = sum(exclude),
excluded_percent = mean(exclude*100)) %>%
mutate_if(is.numeric, round, digits = 1) %>%
kable(align = "c") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
data_processed %>%
summarize(n = n(),
age_mean = mean(age),
age_sd = mean(age),
excluded_n = sum(exclude > 0),
excluded_percent = mean(exclude > 0 *100)) %>%
mutate_if(is.numeric, round, digits = 1) %>%
kable(align = "c") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
data_processed %>%
summarize(n = n(),
age_mean = mean(age),
age_sd = mean(age),
excluded_n = sum(exclude > 0),
excluded_percent = mean(exclude > 0 *100))
data_processed %>%
summarize(age_mean = mean(age),
age_sd = mean(age),
excluded_n = sum(exclude > 0),
excluded_percent = mean(exclude > 0 *100))
data_processed %>%
summarise(age_mean = mean(age),
age_sd = mean(age),
excluded_n = sum(exclude > 0),
excluded_percent = mean(exclude > 0 *100))
data_processed %>%
summarise(n = n(),
age_mean = mean(age),
age_sd = mean(age),
excluded_n = sum(exclude > 0),
excluded_percent = mean(exclude > 0 *100))
View(data_processed_after_exclusions)
data_processed %>%
summarise(age_mean = mean(age),
age_sd = mean(age),
excluded_n = sum(exclude > 0),
excluded_percent = mean(exclude > 0 *100))
data_processed %>%
summarise(n = n(),
age_mean = mean(age, ,na.rm == TRUE),
age_sd = mean(age),
excluded_n = sum(exclude > 0),
excluded_percent = mean(exclude > 0 *100))
?mean
data_processed %>%
summarise(n = n(),
age_mean = mean(age, ,na.rm = TRUE),
age_sd = mean(age),
excluded_n = sum(exclude > 0),
excluded_percent = mean(exclude > 0 *100))
View(data_processed)
data_processed %>%
summarise(n = n(),
age_mean = mean(age, na.rm = TRUE),
age_sd = sd(age, na.rm = TRUE),
excluded_n = sum(exclude > 0),
excluded_percent = mean(exclude > 0 *100))
data_processed %>%
summarise(n = n(),
age_mean = mean(age, na.rm = TRUE),
age_sd = sd(age, na.rm = TRUE),
excluded_n = sum(exclude > 0),
excluded_percent = (excluded_n / n) *100)
data_processed %>%
summarise(n = n(),
age_mean = mean(age, na.rm = TRUE),
age_sd = sd(age, na.rm = TRUE),
excluded_n = sum(exclude > 0),
excluded_percent = (excluded_n / n) *100) %>%
mutate_if(is.numeric, round, digits = 1) %>%
kable(align = "c") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
data_processed %>%
mutate(gender = str_remove_all(gender, "[0-9]"),
gender = str_remove_all(gender, "-"),
gender = ifelse(gender == "", NA, tolower(gender))) %>%
count(experiment, gender) %>%
spread(gender, n) %>%
rename(female = f, male = m, missing = "<NA>") %>%
kable(knitr.kable.NA = "/", align = "c") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
data_processed %>%
count(experiment, gender) %>%
spread(gender, n) %>%
rename(female = f, male = m, missing = "<NA>") %>%
kable(knitr.kable.NA = "/", align = "c") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
data_processed %>%
count(experiment, gender)
data_processed %>%
count(experiment, gender) %>%
spread(gender, n)
data_processed %>%
count(experiment, gender) %>%
spread(gender, n) %>%
kable(knitr.kable.NA = "/", align = "c") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
results_basic_effect_iat_selfreports <- data_processed_after_exclusions %>%
rename(IV = experimental_condition) %>%
gather(DV_type, DV, c(self_reported_rating, IAT_D2_score)) %>%
select(experiment, DV_type, DV, IV) %>%
drop_na() %>%
analysis_workflow(data = .)
View(data_processed_after_exclusions)
results_basic_effect_iat_selfreports <- data_processed_after_exclusions %>%
rename(IV = experiment_condition) %>%
gather(DV_type, DV, c(self_reported_rating, IAT_D2_score)) %>%
select(experiment, DV_type, DV, IV) %>%
drop_na() %>%
analysis_workflow(data = .)
View(results_basic_effect_iat_selfreports)
write_csv(results_basic_effect_iat_selfreports, "results/results_basic_effect_iat_selfreports.csv")
results_basic_effect_iat_selfreports %>%
select(experiment, DV_type, reportable_result) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
write_csv(data_processed_after_exclusions, "results/data_processed_after_exclusions.csv")
# dependencies -----
library(tidyverse)
library(ggthemes)
library(knitr)
library(kableExtra)
library(broom)
library(effsize)
library(BayesFactor)
library(metafor)
library(ez)
library(schoRsch)
library(nnet)
library(epitools)
options(knitr.kable.NA = "/")
# Ensures that the processed data folder exists
dir.create("models")
dir.create("results")
# functions -----
# round p value using apa format
apa_p_value <- function(p){
p_formatted <- ifelse(p >= 0.0001, paste("=", round(p, 4)),
ifelse(p < 0.0001, "< .0001", NA))
p_formatted <- gsub(pattern = "0.", replacement = ".", x = p_formatted, fixed = TRUE)
p_formatted
}
# calculate cohens d and return its output in tidy format - a helper function for analysis_workflow
tidy_cohens_d <- function(data){
require(effsize)
fit <- effsize::cohen.d(DV ~ IV, data = data)
results <- tibble(cohens_d = fit$estimate,
cohens_d_ci_lower = fit$conf.int["lower"],
cohens_d_ci_upper = fit$conf.int["upper"])
return(results)
}
# calculate cohens d and return its output in tidy format - a helper function for analysis_workflow
tidy_ttest_bf <- function(data){
require(BayesFactor)
fit <- data %>%
ttestBF(formula = DV ~ IV, data = .)
results <- data.frame(bf10 = extractBF(fit)$bf)
return(results)
}
# full analysis workflow
# NB workflow returns mean_reference and mean_comparison, where reference is the first factor level and comparison is the next highest level.
analysis_workflow <- function(data){
# frequentist t test
results_t_test <- data %>%
group_by(experiment, DV_type) %>%
do(broom::tidy(t.test(DV ~ IV, data = .))) %>%
ungroup() %>%
rename(t = statistic,
df = parameter,
p = p.value,
mean_reference = estimate1,
mean_comaprison = estimate2)
# cohens d
results_cohens_d <- data %>%
group_by(experiment, DV_type) %>%
do(tidy_cohens_d(data = .)) %>%
ungroup()
# BF t test
results_bf_t_test <- data %>%
group_by(experiment, DV_type) %>%
do(tidy_ttest_bf(data = .)) %>%
ungroup()
# combine
results <-
full_join(results_t_test,
results_cohens_d,
by = c("experiment", "DV_type")) %>%
full_join(results_bf_t_test,
by = c("experiment", "DV_type")) %>%
select(experiment, DV_type,
mean_reference, mean_comaprison,
t, df, p, cohens_d, cohens_d_ci_lower, cohens_d_ci_upper, bf10) %>%
mutate(reportable_result = paste0("Positive video M = ", round(mean_reference, 2), ", Negative video M = ", round(mean_comaprison, 2), ", t(", round(df, 2), ") = ", round(t, 2), ", p ", apa_p_value(p), ", d = ", round(cohens_d, 2), ", 95% CI [", round(cohens_d_ci_lower, 2), ", ", round(cohens_d_ci_upper, 2), "], BF10 = ", round(bf10, 1)))
return(results)
}
OR_to_d <- function(OR){
log(OR)*(sqrt(3)/pi)
}
# full data
data_processed <-
read_csv("C:/Users/Sean/Desktop/git/Deepfaking/Experiment 1/2. Data/processed/data_processed.csv") %>%
# set factor levels for t test comparisons
mutate(experiment_condition = fct_relevel(experiment_condition,
"Positive Video",
"Negative Video")) %>%
# create exclusion variable for IAT data
mutate(exclude_iat = ifelse(complete_iat_data == "complete" & passed_iat_performance == TRUE,
FALSE, TRUE),
# if exclude variable is missing, then exclude
exclude_iat = ifelse(is.na(exclude_iat), TRUE, exclude_iat)) %>%
# create exclusion variable for missing exploratory question data
mutate(exclude_exploratory = ifelse(is.na(memory_of_video_content), TRUE,
ifelse(is.na(diagnosticity_question), TRUE,
ifelse(is.na(demand), TRUE,
ifelse(is.na(reactance), TRUE,
ifelse(is.na(hypothesis_awareness), TRUE,
ifelse(is.na(influence_awareness), TRUE, FALSE))))))) %>%
#create compound exclusion criteria
mutate(exclude = exclude_iat + exclude_exploratory)
# remove missing data
data_processed_after_exclusions <- data_processed %>%
filter(exclude == 0)
data_processed %>%
summarise(n = n(),
age_mean = mean(age, na.rm = TRUE),
age_sd = sd(age, na.rm = TRUE),
excluded_n = sum(exclude > 0),
excluded_percent = (excluded_n / n) *100) %>%
mutate_if(is.numeric, round, digits = 1) %>%
kable(align = "c") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
data_processed %>%
count(experiment, gender) %>%
spread(gender, n) %>%
kable(knitr.kable.NA = "/", align = "c") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
write_csv(data_processed_after_exclusions, "results/data_processed_after_exclusions.csv")
results_basic_effect_iat_selfreports <- data_processed_after_exclusions %>%
rename(IV = experiment_condition) %>%
gather(DV_type, DV, c(self_reported_rating, IAT_D2_score)) %>%
select(experiment, DV_type, DV, IV) %>%
drop_na() %>%
analysis_workflow(data = .)
write_csv(results_basic_effect_iat_selfreports, "results/results_basic_effect_iat_selfreports.csv")
results_basic_effect_iat_selfreports %>%
select(experiment, DV_type, reportable_result) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
View(data_processed_after_exclusions)
