cohens_d_ci_upper = fit$conf.int["upper"])
return(results)
}
# calculate cohens d and return its output in tidy format - a helper function for analysis_workflow
tidy_ttest_bf <- function(data){
require(BayesFactor)
fit <- data %>%
ttestBF(formula = DV ~ IV, data = .)
results <- data.frame(bf10 = extractBF(fit)$bf)
return(results)
}
# full analysis workflow
# NB workflow returns mean_reference and mean_comparison, where reference is the first factor level and comparison is the next highest level.
analysis_workflow <- function(data){
# frequentist t test
results_t_test <- data %>%
group_by(experiment, DV_type) %>%
do(broom::tidy(t.test(DV ~ IV, data = .))) %>%
ungroup() %>%
rename(t = statistic,
df = parameter,
p = p.value,
mean_reference = estimate1,
mean_comaprison = estimate2)
# cohens d
results_cohens_d <- data %>%
group_by(experiment, DV_type) %>%
do(tidy_cohens_d(data = .)) %>%
ungroup()
# BF t test
results_bf_t_test <- data %>%
group_by(experiment, DV_type) %>%
do(tidy_ttest_bf(data = .)) %>%
ungroup()
# combine
results <-
full_join(results_t_test,
results_cohens_d,
by = c("experiment", "DV_type")) %>%
full_join(results_bf_t_test,
by = c("experiment", "DV_type")) %>%
select(experiment, DV_type,
mean_reference, mean_comaprison,
t, df, p, cohens_d, cohens_d_ci_lower, cohens_d_ci_upper, bf10) %>%
mutate(reportable_result = paste0("Positive video M = ", round(mean_reference, 2), ", Negative video M = ", round(mean_comaprison, 2), ", t(", round(df, 2), ") = ", round(t, 2), ", p ", apa_p_value(p), ", d = ", round(cohens_d, 2), ", 95% CI [", round(cohens_d_ci_lower, 2), ", ", round(cohens_d_ci_upper, 2), "], BF10 = ", round(bf10, 1)))
return(results)
}
OR_to_d <- function(OR){
log(OR)*(sqrt(3)/pi)
}
# full data
data_processed <-
read_csv("C:/Users/Sean/Desktop/git/DF-Impression-Formation--Video-and-Audio-/Experiment 2/2. Data/processed/data_processed.csv") %>%
# set factor levels for t test comparisons
mutate(experiment_condition = fct_relevel(experiment_condition,
"Positive Video",
"Negative Video")) %>%
# create exclusion variable for IAT data
mutate(exclude_iat = ifelse(complete_iat_data == "complete" & passed_iat_performance == TRUE,
FALSE, TRUE),
# if exclude variable is missing, then exclude
exclude_iat = ifelse(is.na(exclude_iat), TRUE, exclude_iat)) %>%
# create exclusion variable for missing exploratory question data
mutate(exclude_exploratory = ifelse(is.na(memory_of_video_content), TRUE,
ifelse(is.na(diagnosticity_question), TRUE,
ifelse(is.na(demand), TRUE,
ifelse(is.na(reactance), TRUE,
ifelse(is.na(hypothesis_awareness), TRUE,
ifelse(is.na(influence_awareness), TRUE, FALSE))))))) %>%
#create compound exclusion criteria
mutate(exclude = exclude_iat + exclude_exploratory)
# full data
data_processed <-
read_csv("C:/Users/Sean/Desktop/git/DF-Impression-Formation--Video-and-Audio-/Experiment 2 /2. Data/processed/data_processed.csv") %>%
# set factor levels for t test comparisons
mutate(experiment_condition = fct_relevel(experiment_condition,
"Positive Video",
"Negative Video")) %>%
# create exclusion variable for IAT data
mutate(exclude_iat = ifelse(complete_iat_data == "complete" & passed_iat_performance == TRUE,
FALSE, TRUE),
# if exclude variable is missing, then exclude
exclude_iat = ifelse(is.na(exclude_iat), TRUE, exclude_iat)) %>%
# create exclusion variable for missing exploratory question data
mutate(exclude_exploratory = ifelse(is.na(memory_of_video_content), TRUE,
ifelse(is.na(diagnosticity_question), TRUE,
ifelse(is.na(demand), TRUE,
ifelse(is.na(reactance), TRUE,
ifelse(is.na(hypothesis_awareness), TRUE,
ifelse(is.na(influence_awareness), TRUE, FALSE))))))) %>%
#create compound exclusion criteria
mutate(exclude = exclude_iat + exclude_exploratory)
# full data
data_processed <-
read_csv("C:\Users\Sean\Desktop\git\DF-Impression-Formation--Video-and-Audio-\Experiment 2\Experiment 2\2. Data\processed\data_processed.csv") %>%
# full data
data_processed <-
read_csv("C:\Users\Sean\Desktop\git\DF-Impression-Formation--Video-and-Audio-\Experiment 2\Experiment 2\2. Data\processed\data_processed.csv") %>%
# full data
data_processed <-
read_csv("C:/Users/Sean/Desktop/git/DF-Impression-Formation--Video-and-Audio-/Experiment 2/Experiment 2/2. Data/processed/data_processed.csv") %>%
# set factor levels for t test comparisons
mutate(experiment_condition = fct_relevel(experiment_condition,
"Positive Video",
"Negative Video")) %>%
# create exclusion variable for IAT data
mutate(exclude_iat = ifelse(complete_iat_data == "complete" & passed_iat_performance == TRUE,
FALSE, TRUE),
# if exclude variable is missing, then exclude
exclude_iat = ifelse(is.na(exclude_iat), TRUE, exclude_iat)) %>%
# create exclusion variable for missing exploratory question data
mutate(exclude_exploratory = ifelse(is.na(memory_of_video_content), TRUE,
ifelse(is.na(diagnosticity_question), TRUE,
ifelse(is.na(demand), TRUE,
ifelse(is.na(reactance), TRUE,
ifelse(is.na(hypothesis_awareness), TRUE,
ifelse(is.na(influence_awareness), TRUE, FALSE))))))) %>%
#create compound exclusion criteria
mutate(exclude = exclude_iat + exclude_exploratory)
# remove missing data
data_processed_after_exclusions <- data_processed %>%
filter(exclude == 0)
# full data
data_processed <-
read_csv("C:/Users/Sean/Desktop/git/DF-Impression-Formation--Video-and-Audio-/Experiment 2/Experiment 2/2. Data/processed/data_processed.csv") %>%
# set factor levels for t test comparisons
mutate(experiment_condition = fct_relevel(experiment_condition,
"Positive Video",
"Negative Video")) %>%
# create exclusion variable for IAT data
mutate(exclude_iat = ifelse(complete_iat_data == "complete" & passed_iat_performance == TRUE,
FALSE, TRUE),
# if exclude variable is missing, then exclude
exclude_iat = ifelse(is.na(exclude_iat), TRUE, exclude_iat)) %>%
# create exclusion variable for missing exploratory question data
mutate(exclude_exploratory = ifelse(is.na(memory_of_video_content), TRUE,
ifelse(is.na(diagnosticity_question), TRUE,
ifelse(is.na(demand), TRUE,
ifelse(is.na(reactance), TRUE,
ifelse(is.na(hypothesis_awareness), TRUE,
ifelse(is.na(influence_awareness), TRUE, FALSE))))))) %>%
#create compound exclusion criteria
mutate(exclude = exclude_iat + exclude_exploratory)
# remove missing data
data_processed_after_exclusions <- data_processed %>%
filter(exclude == 0)
# RECODE DEMAND: responses on the demand variable assigned a value of 0 (No Demand) or 1 (Demand)
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(demand_recoded = case_when(grepl("No", demand) ~ 0,
grepl("I", demand) ~ 0,
grepl("Demand", demand) ~ 1))
# RECODE DIAGNOSTICITY: responses on the diagnostic variable are assigned a value from 0 (Not Diagnostic) to 3 (Strongly Diagnostic)
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(diagnosticity_question_recoded = case_when(grepl("Not", diagnosticity_question) ~ 0,
grepl("Slight", diagnosticity_question) ~ 1,
grepl("Moderate", diagnosticity_question) ~ 2,
grepl("Strong", diagnosticity_question) ~ 3))
# RECODE EVALUATIONS: Create two variables (self-report recoded and IAT recoded). An analytic aim (see sections below) is to compare genuine and deepfaked audio in terms of their effect sizes. However, in order to do this, we need to control for the valence of the audio themselves (some conditions got positive audio whereas others got negative audio). So the self-reported rating/IAT score * by -1 for those in the negative audio condition. This ensures that the negative and positive audio are being compared along the same dimension (strength) rather than valence, and that deepfake and genuine audio can be directly compared to one another
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(self_report_recoded = ifelse(experiment_condition == "negative video", self_reported_rating * -1, self_reported_rating),
IAT_recoded = ifelse(experiment_condition == "negative video", IAT_D2_score * -1, IAT_D2_score))
# RECODE EXPLORATORY QUESTION CHECKS: responses on this variable assigned a value of 0 (Not Aware it was a Deepfake) or 1 (Aware it was a Deepfake)
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(influence_awareness_recoded_ = case_when(grepl("Yes", influence_awareness_recoded) ~ 1,
grepl("No", influence_awareness_recoded) ~ 0)) %>%
mutate(hypothesis_awareness_recoded_ = case_when(grepl("Yes", hypothesis_awareness_recoded) ~ 1,
grepl("No", hypothesis_awareness_recoded) ~ 0))
# RECODE REACTANCE: responses on the reactance variable assigned a value of 0 (No Reactance) or 1 (Reactance)
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(reactance_recoded = case_when(grepl("No", reactance) ~ 0,
grepl("I", reactance) ~ 0,
grepl("React", reactance) ~ 1))
# Order Variables in File for Later Analysis
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(demographic_items = "*",
method_items = "*",
evaluative_items = "*",
exploratory_items = "*",
individual_difference_items = "*") %>%
select(numeric_id,
experiment,
demographic_items,
age,
gender,
method_items,
condition,
experiment_condition,
task_order,
IAT_block_order,
complete_iat_data,
passed_iat_performance,
exclude_iat,
exclude_exploratory,
exclude,
evaluative_items,
pos_neg,
good_bad,
like_dislike,
self_reported_rating,
self_report_recoded,
IAT_D2_score,
IAT_recoded,
exploratory_items,
memory_of_video_content,
diagnosticity_question,
diagnosticity_question_recoded,
demand,
demand_recoded,
reactance,
reactance_recoded,
hypothesis_awareness,
hypothesis_awareness_recoded,
hypothesis_awareness_recoded_,
influence_awareness,
influence_awareness_recoded,
influence_awareness_recoded_,
issues_with_study)
# RECODE DEMAND: responses on the demand variable assigned a value of 0 (No Demand) or 1 (Demand)
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(demand_recoded = case_when(grepl("No", demand) ~ 0,
grepl("I", demand) ~ 0,
grepl("Demand", demand) ~ 1))
# RECODE DIAGNOSTICITY: responses on the diagnostic variable are assigned a value from 0 (Not Diagnostic) to 3 (Strongly Diagnostic)
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(diagnosticity_question_recoded = case_when(grepl("Not", diagnosticity_question) ~ 0,
grepl("Slight", diagnosticity_question) ~ 1,
grepl("Moderate", diagnosticity_question) ~ 2,
grepl("Strong", diagnosticity_question) ~ 3))
# RECODE EVALUATIONS: Create two variables (self-report recoded and IAT recoded). An analytic aim (see sections below) is to compare genuine and deepfaked audio in terms of their effect sizes. However, in order to do this, we need to control for the valence of the audio themselves (some conditions got positive audio whereas others got negative audio). So the self-reported rating/IAT score * by -1 for those in the negative audio condition. This ensures that the negative and positive audio are being compared along the same dimension (strength) rather than valence, and that deepfake and genuine audio can be directly compared to one another
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(self_report_recoded = ifelse(experiment_condition == "negative video", self_reported_rating * -1, self_reported_rating),
IAT_recoded = ifelse(experiment_condition == "negative video", IAT_D2_score * -1, IAT_D2_score))
# RECODE EXPLORATORY QUESTION CHECKS: responses on this variable assigned a value of 0 (Not Aware it was a Deepfake) or 1 (Aware it was a Deepfake)
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(influence_awareness_recoded_ = case_when(grepl("Yes", influence_awareness_recoded) ~ 1,
grepl("No", influence_awareness_recoded) ~ 0)) %>%
mutate(hypothesis_awareness_recoded_ = case_when(grepl("Yes", hypothesis_awareness_recoded) ~ 1,
grepl("No", hypothesis_awareness_recoded) ~ 0))
# RECODE REACTANCE: responses on the reactance variable assigned a value of 0 (No Reactance) or 1 (Reactance)
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(reactance_recoded = case_when(grepl("No", reactance) ~ 0,
grepl("I", reactance) ~ 0,
grepl("React", reactance) ~ 1))
# Order Variables in File for Later Analysis
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(demographic_items = "*",
method_items = "*",
evaluative_items = "*",
exploratory_items = "*",
individual_difference_items = "*") %>%
select(numeric_id,
experiment,
demographic_items,
age,
gender,
method_items,
experiment_condition,
task_order,
IAT_block_order,
complete_iat_data,
passed_iat_performance,
exclude_iat,
exclude_exploratory,
exclude,
evaluative_items,
pos_neg,
good_bad,
like_dislike,
self_reported_rating,
self_report_recoded,
IAT_D2_score,
IAT_recoded,
exploratory_items,
memory_of_video_content,
diagnosticity_question,
diagnosticity_question_recoded,
demand,
demand_recoded,
reactance,
reactance_recoded,
hypothesis_awareness,
hypothesis_awareness_recoded,
hypothesis_awareness_recoded_,
influence_awareness,
influence_awareness_recoded,
influence_awareness_recoded_,
issues_with_study)
# Write total dataset after exclusions to file
write_csv(data_processed_after_exclusions, "results/total_data.csv")
# Write deepfake only condition after exclusions to file
data_deepfake_condition <- data_processed_after_exclusions %>%
filter(video_type == "deepfake video") %>%
write_csv("results/deepfake_only.csv")
# RECODE DEMAND: responses on the demand variable assigned a value of 0 (No Demand) or 1 (Demand)
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(demand_recoded = case_when(grepl("No", demand) ~ 0,
grepl("I", demand) ~ 0,
grepl("Demand", demand) ~ 1))
# RECODE DIAGNOSTICITY: responses on the diagnostic variable are assigned a value from 0 (Not Diagnostic) to 3 (Strongly Diagnostic)
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(diagnosticity_question_recoded = case_when(grepl("Not", diagnosticity_question) ~ 0,
grepl("Slight", diagnosticity_question) ~ 1,
grepl("Moderate", diagnosticity_question) ~ 2,
grepl("Strong", diagnosticity_question) ~ 3))
# RECODE EVALUATIONS: Create two variables (self-report recoded and IAT recoded). An analytic aim (see sections below) is to compare genuine and deepfaked audio in terms of their effect sizes. However, in order to do this, we need to control for the valence of the audio themselves (some conditions got positive audio whereas others got negative audio). So the self-reported rating/IAT score * by -1 for those in the negative audio condition. This ensures that the negative and positive audio are being compared along the same dimension (strength) rather than valence, and that deepfake and genuine audio can be directly compared to one another
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(self_report_recoded = ifelse(experiment_condition == "negative video", self_reported_rating * -1, self_reported_rating),
IAT_recoded = ifelse(experiment_condition == "negative video", IAT_D2_score * -1, IAT_D2_score))
# RECODE EXPLORATORY QUESTION CHECKS: responses on this variable assigned a value of 0 (Not Aware it was a Deepfake) or 1 (Aware it was a Deepfake)
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(influence_awareness_recoded_ = case_when(grepl("Yes", influence_awareness_recoded) ~ 1,
grepl("No", influence_awareness_recoded) ~ 0)) %>%
mutate(hypothesis_awareness_recoded_ = case_when(grepl("Yes", hypothesis_awareness_recoded) ~ 1,
grepl("No", hypothesis_awareness_recoded) ~ 0))
# RECODE REACTANCE: responses on the reactance variable assigned a value of 0 (No Reactance) or 1 (Reactance)
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(reactance_recoded = case_when(grepl("No", reactance) ~ 0,
grepl("I", reactance) ~ 0,
grepl("React", reactance) ~ 1))
# Order Variables in File for Later Analysis
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(demographic_items = "*",
method_items = "*",
evaluative_items = "*",
exploratory_items = "*",
individual_difference_items = "*") %>%
select(numeric_id,
experiment,
demographic_items,
age,
gender,
method_items,
experiment_condition,
task_order,
IAT_block_order,
complete_iat_data,
passed_iat_performance,
exclude_iat,
exclude_exploratory,
exclude,
evaluative_items,
pos_neg,
good_bad,
like_dislike,
self_reported_rating,
self_report_recoded,
IAT_D2_score,
IAT_recoded,
exploratory_items,
memory_of_video_content,
diagnosticity_question,
diagnosticity_question_recoded,
demand,
demand_recoded,
reactance,
reactance_recoded,
hypothesis_awareness,
hypothesis_awareness_recoded,
hypothesis_awareness_recoded_,
influence_awareness,
influence_awareness_recoded,
influence_awareness_recoded_,
issues_with_study)
# Write total dataset after exclusions to file
write_csv(data_processed_after_exclusions, "results/total_data.csv")
View(data_processed_after_exclusions)
# RECODE DEMAND: responses on the demand variable assigned a value of 0 (No Demand) or 1 (Demand)
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(demand_recoded = case_when(grepl("No", demand) ~ 0,
grepl("I", demand) ~ 0,
grepl("Demand", demand) ~ 1))
# RECODE DIAGNOSTICITY: responses on the diagnostic variable are assigned a value from 0 (Not Diagnostic) to 3 (Strongly Diagnostic)
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(diagnosticity_question_recoded = case_when(grepl("Not", diagnosticity_question) ~ 0,
grepl("Slight", diagnosticity_question) ~ 1,
grepl("Moderate", diagnosticity_question) ~ 2,
grepl("Strong", diagnosticity_question) ~ 3))
# RECODE EVALUATIONS: Create two variables (self-report recoded and IAT recoded). An analytic aim (see sections below) is to compare genuine and deepfaked audio in terms of their effect sizes. However, in order to do this, we need to control for the valence of the audio themselves (some conditions got positive audio whereas others got negative audio). So the self-reported rating/IAT score * by -1 for those in the negative audio condition. This ensures that the negative and positive audio are being compared along the same dimension (strength) rather than valence, and that deepfake and genuine audio can be directly compared to one another
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(self_report_recoded = ifelse(experiment_condition == "Negative video", self_reported_rating * -1, self_reported_rating),
IAT_recoded = ifelse(experiment_condition == "Negative video", IAT_D2_score * -1, IAT_D2_score))
# RECODE EXPLORATORY QUESTION CHECKS: responses on this variable assigned a value of 0 (Not Aware it was a Deepfake) or 1 (Aware it was a Deepfake)
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(influence_awareness_recoded_ = case_when(grepl("Yes", influence_awareness_recoded) ~ 1,
grepl("No", influence_awareness_recoded) ~ 0)) %>%
mutate(hypothesis_awareness_recoded_ = case_when(grepl("Yes", hypothesis_awareness_recoded) ~ 1,
grepl("No", hypothesis_awareness_recoded) ~ 0))
# RECODE REACTANCE: responses on the reactance variable assigned a value of 0 (No Reactance) or 1 (Reactance)
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(reactance_recoded = case_when(grepl("No", reactance) ~ 0,
grepl("I", reactance) ~ 0,
grepl("React", reactance) ~ 1))
# Order Variables in File for Later Analysis
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(demographic_items = "*",
method_items = "*",
evaluative_items = "*",
exploratory_items = "*",
individual_difference_items = "*") %>%
select(numeric_id,
experiment,
demographic_items,
age,
gender,
method_items,
experiment_condition,
task_order,
IAT_block_order,
complete_iat_data,
passed_iat_performance,
exclude_iat,
exclude_exploratory,
exclude,
evaluative_items,
pos_neg,
good_bad,
like_dislike,
self_reported_rating,
self_report_recoded,
IAT_D2_score,
IAT_recoded,
exploratory_items,
memory_of_video_content,
diagnosticity_question,
diagnosticity_question_recoded,
demand,
demand_recoded,
reactance,
reactance_recoded,
hypothesis_awareness,
hypothesis_awareness_recoded,
hypothesis_awareness_recoded_,
influence_awareness,
influence_awareness_recoded,
influence_awareness_recoded_,
issues_with_study)
# Write total dataset after exclusions to file
write_csv(data_processed_after_exclusions, "results/total_data.csv")
View(data_processed_after_exclusions)
# RECODE DEMAND: responses on the demand variable assigned a value of 0 (No Demand) or 1 (Demand)
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(demand_recoded = case_when(grepl("No", demand) ~ 0,
grepl("I", demand) ~ 0,
grepl("Demand", demand) ~ 1))
# RECODE DIAGNOSTICITY: responses on the diagnostic variable are assigned a value from 0 (Not Diagnostic) to 3 (Strongly Diagnostic)
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(diagnosticity_question_recoded = case_when(grepl("Not", diagnosticity_question) ~ 0,
grepl("Slight", diagnosticity_question) ~ 1,
grepl("Moderate", diagnosticity_question) ~ 2,
grepl("Strong", diagnosticity_question) ~ 3))
# RECODE EVALUATIONS: Create two variables (self-report recoded and IAT recoded). An analytic aim (see sections below) is to compare genuine and deepfaked audio in terms of their effect sizes. However, in order to do this, we need to control for the valence of the audio themselves (some conditions got positive audio whereas others got negative audio). So the self-reported rating/IAT score * by -1 for those in the negative audio condition. This ensures that the negative and positive audio are being compared along the same dimension (strength) rather than valence, and that deepfake and genuine audio can be directly compared to one another
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(self_report_recoded = ifelse(experiment_condition == "Negative Video", self_reported_rating * -1, self_reported_rating),
IAT_recoded = ifelse(experiment_condition == "Negative Video", IAT_D2_score * -1, IAT_D2_score))
# RECODE EXPLORATORY QUESTION CHECKS: responses on this variable assigned a value of 0 (Not Aware it was a Deepfake) or 1 (Aware it was a Deepfake)
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(influence_awareness_recoded_ = case_when(grepl("Yes", influence_awareness_recoded) ~ 1,
grepl("No", influence_awareness_recoded) ~ 0)) %>%
mutate(hypothesis_awareness_recoded_ = case_when(grepl("Yes", hypothesis_awareness_recoded) ~ 1,
grepl("No", hypothesis_awareness_recoded) ~ 0))
# RECODE REACTANCE: responses on the reactance variable assigned a value of 0 (No Reactance) or 1 (Reactance)
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(reactance_recoded = case_when(grepl("No", reactance) ~ 0,
grepl("I", reactance) ~ 0,
grepl("React", reactance) ~ 1))
# Order Variables in File for Later Analysis
data_processed_after_exclusions <- data_processed_after_exclusions %>%
mutate(demographic_items = "*",
method_items = "*",
evaluative_items = "*",
exploratory_items = "*",
individual_difference_items = "*") %>%
select(numeric_id,
experiment,
demographic_items,
age,
gender,
method_items,
experiment_condition,
task_order,
IAT_block_order,
complete_iat_data,
passed_iat_performance,
exclude_iat,
exclude_exploratory,
exclude,
evaluative_items,
pos_neg,
good_bad,
like_dislike,
self_reported_rating,
self_report_recoded,
IAT_D2_score,
IAT_recoded,
exploratory_items,
memory_of_video_content,
diagnosticity_question,
diagnosticity_question_recoded,
demand,
demand_recoded,
reactance,
reactance_recoded,
hypothesis_awareness,
hypothesis_awareness_recoded,
hypothesis_awareness_recoded_,
influence_awareness,
influence_awareness_recoded,
influence_awareness_recoded_,
issues_with_study)
# Write total dataset after exclusions to file
write_csv(data_processed_after_exclusions, "results/total_data.csv")
View(data_processed_after_exclusions)
