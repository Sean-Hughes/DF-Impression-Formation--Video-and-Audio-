# dependencies -----
library(tidyverse)
library(ggthemes)
library(knitr)
library(kableExtra)
library(broom)
library(effsize)
library(BayesFactor)
library(metafor)
library(ez)
library(schoRsch)
library(nnet)
library(epitools)
options(knitr.kable.NA = "/")
# Ensures that the processed data folder exists
dir.create("models")
dir.create("results")
# functions -----
# round p value using apa format
apa_p_value <- function(p){
p_formatted <- ifelse(p >= 0.0001, paste("=", round(p, 4)),
ifelse(p < 0.0001, "< .0001", NA))
p_formatted <- gsub(pattern = "0.", replacement = ".", x = p_formatted, fixed = TRUE)
p_formatted
}
# calculate cohens d and return its output in tidy format - a helper function for analysis_workflow
tidy_cohens_d <- function(data){
require(effsize)
fit <- effsize::cohen.d(DV ~ IV, data = data)
results <- tibble(cohens_d = fit$estimate,
cohens_d_ci_lower = fit$conf.int["lower"],
cohens_d_ci_upper = fit$conf.int["upper"])
return(results)
}
# calculate cohens d and return its output in tidy format - a helper function for analysis_workflow
tidy_ttest_bf <- function(data){
require(BayesFactor)
fit <- data %>%
ttestBF(formula = DV ~ IV, data = .)
results <- data.frame(bf10 = extractBF(fit)$bf)
return(results)
}
# full analysis workflow
# NB workflow returns mean_reference and mean_comparison, where reference is the first factor level and comparison is the next highest level.
analysis_workflow <- function(data){
# frequentist t test
results_t_test <- data %>%
group_by(experiment, DV_type) %>%
do(broom::tidy(t.test(DV ~ IV, data = .))) %>%
ungroup() %>%
rename(t = statistic,
df = parameter,
p = p.value,
mean_reference = estimate1,
mean_comaprison = estimate2)
# cohens d
results_cohens_d <- data %>%
group_by(experiment, DV_type) %>%
do(tidy_cohens_d(data = .)) %>%
ungroup()
# BF t test
results_bf_t_test <- data %>%
group_by(experiment, DV_type) %>%
do(tidy_ttest_bf(data = .)) %>%
ungroup()
# combine
results <-
full_join(results_t_test,
results_cohens_d,
by = c("experiment", "DV_type")) %>%
full_join(results_bf_t_test,
by = c("experiment", "DV_type")) %>%
select(experiment, DV_type,
mean_reference, mean_comaprison,
t, df, p, cohens_d, cohens_d_ci_lower, cohens_d_ci_upper, bf10) %>%
mutate(reportable_result = paste0("Positive video M = ", round(mean_reference, 2), ", Negative video M = ", round(mean_comaprison, 2), ", t(", round(df, 2), ") = ", round(t, 2), ", p ", apa_p_value(p), ", d = ", round(cohens_d, 2), ", 95% CI [", round(cohens_d_ci_lower, 2), ", ", round(cohens_d_ci_upper, 2), "], BF10 = ", round(bf10, 1)))
return(results)
}
OR_to_d <- function(OR){
log(OR)*(sqrt(3)/pi)
}
