mutate(deepfake_concept_check_recoded_ = case_when(grepl("Yes", deepfake_concept_check_recoded) ~ 1,
grepl("No", deepfake_concept_check_recoded) ~ 0)) %>%
mutate(deepfake_video_check_recoded_ = case_when(grepl("Yes", deepfake_video_check_recoded) ~ 1,
grepl("No", deepfake_video_check_recoded) ~ 0)) %>%
mutate(recognised_video_manipulation_ = case_when(grepl("Yes", recognised_video_manipulation) ~ 1,
grepl("No", recognised_video_manipulation) ~ 0)) %>%
mutate(influence_awareness_recoded_ = case_when(grepl("Yes", influence_awareness_recoded) ~ 1,
grepl("No", influence_awareness_recoded) ~ 0)) %>%
mutate(hypothesis_awareness_recoded_ = case_when(grepl("Yes", hypothesis_awareness_recoded) ~ 1,
grepl("No", hypothesis_awareness_recoded) ~ 0))
# RECODE INCOME: responses on the income variable are assigned a value from 1 (lower income: Less than $25,000) to 8 (higher income: $200,000 or more).
data_processed_after_hand_scoring <- data_processed_after_hand_scoring %>%
mutate(income_recoded = case_when(grepl("Less", income) ~ "1",
grepl("34", income) ~ "2",
grepl("35", income) ~ "3",
grepl("74", income) ~ "4",
grepl("75", income) ~ "5",
grepl("100", income) ~ "6",
grepl("19", income) ~ "7",
grepl("200", income) ~ "8",
grepl("know", income) ~ "Don't Know",
grepl("Prefer", income) ~ "Prefer Not to Say"))
# RECODE OVERCLAIMING SCALE: calculate a mean score
data_processed_after_hand_scoring <- data_processed_after_hand_scoring %>%
mutate(overclaiming_mean = (ocq_1 + ocq_2 + ocq_3 + ocq_4 + ocq_5 + ocq_6 + ocq_7 + ocq_8 + ocq_9 + ocq_10 + ocq_11 + ocq_12 + ocq_13 + ocq_14 + ocq_15 + ocq_16 + ocq_17 + ocq_18 + ocq_19 + ocq_20 + ocq_21 + ocq_22 + ocq_23 + ocq_24 + ocq_25 + ocq_26 + ocq_27 + ocq_28 + ocq_29 + ocq_30)/30)
# RECODE POLITICAL IDENTITY: responses on this variable assigned a value from -3 (Strongly Disagree) to 3 (Strongly Agree) with 0 (Neither Agree nor Disagree) as a midpoint
data_processed_after_hand_scoring <- data_processed_after_hand_scoring %>%
mutate(political_identity_recoded = case_when(grepl("Strongly Agree", political_ideology_identity_1) ~ 3,
grepl("Moderately Agree", political_ideology_identity_1) ~ 2,
grepl("Somewhat Agree", political_ideology_identity_1) ~ 1,
grepl("Neither", political_ideology_identity_1) ~ 0,
grepl("Somewhat disagree", political_ideology_identity_1) ~ -1,
grepl("Moderately disagree", political_ideology_identity_1) ~ -2,
grepl("Strongly disagree", political_ideology_identity_1) ~ -3))
# RECODE POLITICAL IDEOLOGY (SOCIAL): responses on this variable assigned a value from 1 (Strongly Liberal) to 5 (Strongly Conservative)
data_processed_after_hand_scoring <- data_processed_after_hand_scoring %>%
mutate(political_ideology_social_issues_recoded = case_when(grepl("Strongly Liberal", political_ideology_social_issues) ~ 1,
grepl("Somewhat Liberal", political_ideology_social_issues) ~ 2,
grepl("Moderate", political_ideology_social_issues) ~ 3,
grepl("Somewhat Conservative", political_ideology_social_issues) ~ 4,
grepl("Strongly Conservative", political_ideology_social_issues) ~ 5))
# RECODE POLITICAL IDEOLOGY (ECONOMIC): responses on this variable assigned a value from 1 (Strongly Liberal) to 5 (Strongly Conservative)
data_processed_after_hand_scoring <- data_processed_after_hand_scoring %>%
mutate(political_ideology_economic_issues_recoded = case_when(grepl("Strongly Liberal", political_ideology_economic_issues) ~ 1,
grepl("Somewhat Liberal", political_ideology_economic_issues) ~ 2,
grepl("Moderate", political_ideology_economic_issues) ~ 3,
grepl("Somewhat Conservative", political_ideology_economic_issues) ~ 4,
grepl("Strongly Conservative", political_ideology_economic_issues) ~ 5))
# RECODE REACTANCE: responses on the reactance variable assigned a value of 0 (No Reactance) or 1 (Reactance)
data_processed_after_hand_scoring <- data_processed_after_hand_scoring %>%
mutate(reactance_recoded = case_when(grepl("No", reactance) ~ 0,
grepl("I", reactance) ~ 0,
grepl("React", reactance) ~ 1))
# RECODE RATIONAL EXPERIENTAL INVENTORY (REI): calculate a mean score
data_processed_after_hand_scoring <- data_processed_after_hand_scoring %>%
# Reverse the coding on items that require it so higher scores always indicate more rational thinking     (i.e., score goes from 1 to 7, 2 to 6, 3 to 5, 5 goes to 3, 6 goes to 2, and 7 goes to 1)
mutate(q1_rei_recoded = case_when((q1_rei == 1) ~ 7,
(q1_rei == 2) ~ 6,
(q1_rei == 3) ~ 5,
(q1_rei == 4) ~ 4,
(q1_rei == 5) ~ 3,
(q1_rei == 6) ~ 2,
(q1_rei == 7) ~ 1)) %>%
mutate(q4_rei_recoded = case_when((q4_rei == 1) ~ 7,
(q4_rei == 2) ~ 6,
(q4_rei == 3) ~ 5,
(q4_rei == 4) ~ 4,
(q4_rei == 5) ~ 3,
(q4_rei == 6) ~ 2,
(q4_rei == 7) ~ 1)) %>%
mutate(q6_rei_recoded = case_when((q6_rei == 1) ~ 7,
(q6_rei == 2) ~ 6,
(q6_rei == 3) ~ 5,
(q6_rei == 4) ~ 4,
(q6_rei == 5) ~ 3,
(q6_rei == 6) ~ 2,
(q6_rei == 7) ~ 1)) %>%
mutate(q7_rei_recoded = case_when((q7_rei == 1) ~ 7,
(q7_rei == 2) ~ 6,
(q7_rei == 3) ~ 5,
(q7_rei == 4) ~ 4,
(q7_rei == 5) ~ 3,
(q7_rei == 6) ~ 2,
(q7_rei == 7) ~ 1)) %>%
mutate(q10_rei_recoded = case_when((q10_rei == 1) ~ 7,
(q10_rei == 2) ~ 6,
(q10_rei == 3) ~ 5,
(q10_rei == 4) ~ 4,
(q10_rei == 5) ~ 3,
(q10_rei == 6) ~ 2,
(q10_rei == 7) ~ 1)) %>%
mutate(q13_rei_recoded = case_when((q13_rei == 1) ~ 7,
(q13_rei == 2) ~ 6,
(q13_rei == 3) ~ 5,
(q13_rei == 4) ~ 4,
(q13_rei == 5) ~ 3,
(q13_rei == 6) ~ 2,
(q13_rei == 7) ~ 1)) %>%
mutate(q15_rei_recoded = case_when((q15_rei == 1) ~ 7,
(q15_rei == 2) ~ 6,
(q15_rei == 3) ~ 5,
(q15_rei == 4) ~ 4,
(q15_rei == 5) ~ 3,
(q15_rei == 6) ~ 2,
(q15_rei == 7) ~ 1)) %>%
mutate(q18_rei_recoded = case_when((q18_rei == 1) ~ 7,
(q18_rei == 2) ~ 6,
(q18_rei == 3) ~ 5,
(q18_rei == 4) ~ 4,
(q18_rei == 5) ~ 3,
(q18_rei == 6) ~ 2,
(q18_rei == 7) ~ 1)) %>%
mutate(q19_rei_recoded = case_when((q19_rei == 1) ~ 7,
(q19_rei == 2) ~ 6,
(q19_rei == 3) ~ 5,
(q19_rei == 4) ~ 4,
(q19_rei == 5) ~ 3,
(q19_rei == 6) ~ 2,
(q19_rei == 7) ~ 1)) %>%
mutate(q20_rei_recoded = case_when((q20_rei == 1) ~ 7,
(q20_rei == 2) ~ 6,
(q20_rei == 3) ~ 5,
(q20_rei == 4) ~ 4,
(q20_rei == 5) ~ 3,
(q20_rei == 6) ~ 2,
(q20_rei == 7) ~ 1)) %>%
# Rational Scale (normal indicates no reversed scoring and reverse indicates reverse scoring)
#Q1. Reverse Q2. Normal Q6.Reverse Q7. Reverse Q10. Reverse Q11. Normal Q13.Reverse Q15. Reverse Q19. Reverse Q20. Reverse
mutate(rational_scale_rei = ((q1_rei_recoded + q2_rei + q6_rei_recoded + q7_rei_recoded + q10_rei_recoded + q11_rei + q13_rei_recoded + q15_rei_recoded + q19_rei_recoded + q20_rei_recoded))/10,
# Experiential Scale
# Q3.Normal Q4.Reverse Q5. Normal Q8. Normal Q9. Normal Q12. Normal Q14. Normal Q16. Normal Q17. Normal Q18. Reverse
experiential_scale_rei = ((q3_rei + q4_rei_recoded + q5_rei + q8_rei + q9_rei + q12_rei + q14_rei + q16_rei + q17_rei + q18_rei_recoded)/10))
# RECODE RELIGIOUS AFFILITATION: responses on this variable assigned to one of three categories: Religious, Agnostic, Atheist (note: no religion individuals are assigned to the atheist group)
data_processed_after_hand_scoring <- data_processed_after_hand_scoring %>%
mutate(religious_affiliation_general_recoded = case_when(grepl("Agnostic", religious_affiliation_general) ~ "Agnostic",
grepl("Atheist", religious_affiliation_general) ~ "Atheist",
grepl("Christian", religious_affiliation_general) ~ "Religious",
grepl("Hindu", religious_affiliation_general) ~ "Religious",
grepl("Humanist", religious_affiliation_general) ~ "Religious",
grepl("Jewish", religious_affiliation_general) ~ "Religious",
grepl("Muslim", religious_affiliation_general) ~ "Religious",
grepl("No religion", religious_affiliation_general) ~ "Atheist",
grepl("Other not listed", religious_affiliation_general) ~ "Religious",
grepl("Sikh", religious_affiliation_general) ~ "Religious"))
# RECODE RELIGIOUS AFFILITATION SCALE: responses on this variable scored from 1 (I strongly disagree) to 5 (I strongly agree). Responses to each item will be summed to create a total score representing ‘Religiosity’, with higher scores indicating higher religiosity.
data_processed_after_hand_scoring <- data_processed_after_hand_scoring %>%
mutate(ras_q1_recoded = case_when(grepl("I strongly disagree", ras_q1) ~ 1,
grepl("I disagree", ras_q1) ~ 2,
grepl("I don't know", ras_q1) ~ 3,
grepl("I agree", ras_q1) ~ 4,
grepl("I strongly agree", ras_q1) ~ 5),
ras_q2_recoded = case_when(grepl("I strongly disagree", ras_q2) ~ 1,
grepl("I disagree", ras_q2) ~ 2,
grepl("I don't know", ras_q2) ~ 3,
grepl("I agree", ras_q2) ~ 4,
grepl("I strongly agree", ras_q2) ~ 5),
ras_q3_recoded = case_when(grepl("I strongly disagree", ras_q3) ~ 1,
grepl("I disagree", ras_q3) ~ 2,
grepl("I don't know", ras_q3) ~ 3,
grepl("I agree", ras_q3) ~ 4,
grepl("I strongly agree", ras_q3) ~ 5),
ras_q4_recoded = case_when(grepl("I strongly disagree", ras_q4) ~ 1,
grepl("I disagree", ras_q4) ~ 2,
grepl("I don't know", ras_q4) ~ 3,
grepl("I agree", ras_q4) ~ 4,
grepl("I strongly agree", ras_q4) ~ 5),
ras_q5_recoded = case_when(grepl("I strongly disagree", ras_q5) ~ 1,
grepl("I disagree", ras_q5) ~ 2,
grepl("I don't know", ras_q5) ~ 3,
grepl("I agree", ras_q5) ~ 4,
grepl("I strongly agree", ras_q5) ~ 5),
ras_q6_recoded = case_when(grepl("I strongly disagree", ras_q6) ~ 1,
grepl("I disagree", ras_q6) ~ 2,
grepl("I don't know", ras_q6) ~ 3,
grepl("I agree", ras_q6) ~ 4,
grepl("I strongly agree", ras_q6) ~ 5),
ras_q7_recoded = case_when(grepl("I strongly disagree", ras_q7) ~ 1,
grepl("I disagree", ras_q7) ~ 2,
grepl("I don't know", ras_q7) ~ 3,
grepl("I agree", ras_q7) ~ 4,
grepl("I strongly agree", ras_q7) ~ 5),
relgious_affliation_score_mean = ((ras_q1_recoded + ras_q2_recoded + ras_q3_recoded + ras_q4_recoded + ras_q5_recoded + ras_q6_recoded + ras_q7_recoded)/7))
# Order Variables in File for Later Analysis
data_processed_after_hand_scoring <- data_processed_after_hand_scoring %>%
mutate(demographic_items = "*",
method_items = "*",
evaluative_items = "*",
exploratory_items = "*",
individual_difference_items = "*") %>%
select(numeric_id,
experiment,
demographic_items,
age,
gender,
gender_self_describe,
ethnicity,
ethnicity_self_describe,
education,
education_recoded,
employment,
employment_recoded,
location,
income,
income_recoded,
method_items,
condition,
experiment_condition,
video_type,
task_order,
IAT_block_order,
complete_iat_data,
passed_iat_performance,
exclude_iat,
exclude_exploratory,
exclude,
evaluative_items,
pos_neg,
good_bad,
like_dislike,
self_reported_rating,
self_report_recoded,
IAT_D2_score,
IAT_recoded,
exploratory_items,
memory_of_video_content,
diagnosticity_question,
diagnosticity_question_recoded,
demand,
demand_recoded,
reactance,
reactance_recoded,
hypothesis_awareness,
hypothesis_awareness_recoded_,
influence_awareness,
influence_awareness_recoded_,
recognised_video_manipulation_,
deepfake_video_check,
deepfake_video_check_recoded_,
deepfake_concept_check,
deepfake_concept_check_recoded_,
issues_with_study,
individual_difference_items,
political_ideology_identity_1,
political_ideology_social_issues,
political_ideology_economic_issues,
religious_affiliation_general,
political_identity_recoded,
political_ideology_social_issues_recoded,
political_ideology_economic_issues_recoded,
ras_q1,
ras_q2,
ras_q3,
ras_q4,
ras_q5,
ras_q6,
ras_q7,
ras_q8,
religious_affiliation_general_recoded,
ras_q1_recoded,
ras_q2_recoded,
ras_q3_recoded,
ras_q4_recoded,
ras_q5_recoded,
ras_q6_recoded,
ras_q7_recoded,
relgious_affliation_score_mean,
q1_bcti,
q2_bcti,
q3_bcti,
q4_bcti,
q5_bcti,
q6_bcti,
q7_bcti,
q8_bcti,
q9_bcti,
q10_bcti,
q11_bcti,
q12_bcti,
q13_bcti,
q14_bcti,
q15_bcti,
belief_in_conspiracy_mean,
ocq_1,
ocq_2,
ocq_3,
ocq_4,
ocq_5,
ocq_6,
ocq_7,
ocq_8,
ocq_9,
ocq_10,
ocq_11,
ocq_12,
ocq_13,
ocq_14,
ocq_15,
ocq_16,
ocq_17,
ocq_18,
ocq_19,
ocq_20,
ocq_21,
ocq_22,
ocq_23,
ocq_24,
ocq_25,
ocq_26,
ocq_27,
ocq_28,
ocq_29,
ocq_30,
overclaiming_mean,
q1_rei,
q1_rei_recoded,
q2_rei,
q3_rei,
q4_rei,
q4_rei_recoded,
q5_rei,
q6_rei,
q6_rei_recoded,
q7_rei,
q7_rei_recoded,
q8_rei,
q9_rei,
q10_rei,
q10_rei_recoded,
q11_rei,
q12_rei,
q13_rei,
q13_rei_recoded,
q14_rei,
q15_rei,
q15_rei_recoded,
q16_rei,
q17_rei,
q18_rei,
q18_rei_recoded,
q19_rei,
q19_rei_recoded,
q20_rei,
q20_rei_recoded,
rational_scale_rei,
experiential_scale_rei,
crt_q1,
crt_q2,
crt_q3,
crt_q4,
crt_q5,
crt_q6,
crt_q7,
crt_q8,
crt_q9,
crt_q1_recoded,
crt_q2_recoded,
crt_q3_recoded,
crt_q4_recoded,
crt_q5_recoded,
crt_q6_recoded,
crt_q7_recoded,
analytic_thinking_crt_score)
# Write file to disk for hand scoring of open ended questions
write_xlsx(data_processed_after_hand_scoring, "results/data_for_analysis.xlsx")
# Write deepfake only condition subset of data
sean <- data_processed_after_hand_scoring %>%
filter(video_type == "deepfake")
View(data_processed_after_hand_scoring)
# Write deepfake only condition subset of data
sean <- data_processed_after_hand_scoring %>%
filter(video_type == "deepfake video")
# Write deepfake only condition subset of data
sean <- data_processed_after_hand_scoring %>%
filter(video_type == "deepfake video") %>%
write_xlsx(data_processed_after_hand_scoring, "results/deepfake_only.xlsx")
# Write deepfake only condition subset of data
sean <- data_processed_after_hand_scoring %>%
filter(video_type == "deepfake video") %>%
write_xlsx("results/deepfake_only.xlsx")
# dependencies -----
library(rstatix)
library(datarium)
library(tidyverse)
library(ggthemes)
library(knitr)
library(kableExtra)
library(broom)
library(effsize)
library(BayesFactor)
library(metafor)
library(ez)
library(schoRsch)
library(nnet)
library(epitools)
library(writexl)
library(readxl)
options(knitr.kable.NA = "/")
# Ensures that the processed data folder exists
dir.create("models")
dir.create("results")
# functions -----
# round p value using apa format
apa_p_value <- function(p){
p_formatted <- ifelse(p >= 0.0001, paste("=", round(p, 4)),
ifelse(p < 0.0001, "< .0001", NA))
p_formatted <- gsub(pattern = "0.", replacement = ".", x = p_formatted, fixed = TRUE)
p_formatted
}
# calculate cohens d and return its output in tidy format - a helper function for analysis_workflow
tidy_cohens_d <- function(data){
require(effsize)
fit <- effsize::cohen.d(DV ~ IV, data = data)
results <- tibble(cohens_d = fit$estimate,
cohens_d_ci_lower = fit$conf.int["lower"],
cohens_d_ci_upper = fit$conf.int["upper"])
return(results)
}
# calculate cohens d and return its output in tidy format - a helper function for analysis_workflow
tidy_ttest_bf <- function(data){
require(BayesFactor)
fit <- data %>%
ttestBF(formula = DV ~ IV, data = .)
results <- data.frame(bf10 = extractBF(fit)$bf)
return(results)
}
# full analysis workflow
# NB workflow returns mean_reference and mean_comparison, where reference is the first factor level and comparison is the next highest level.
analysis_workflow <- function(data){
# frequentist t test
results_t_test <- data %>%
group_by(experiment, DV_type) %>%
do(broom::tidy(t.test(DV ~ IV, data = .))) %>%
ungroup() %>%
rename(t = statistic,
df = parameter,
p = p.value,
mean_reference = estimate1,
mean_comaprison = estimate2)
# cohens d
results_cohens_d <- data %>%
group_by(experiment, DV_type) %>%
do(tidy_cohens_d(data = .)) %>%
ungroup()
# BF t test
results_bf_t_test <- data %>%
group_by(experiment, DV_type) %>%
do(tidy_ttest_bf(data = .)) %>%
ungroup()
# combine
results <-
full_join(results_t_test,
results_cohens_d,
by = c("experiment", "DV_type")) %>%
full_join(results_bf_t_test,
by = c("experiment", "DV_type")) %>%
select(experiment, DV_type,
mean_reference, mean_comaprison,
t, df, p, cohens_d, cohens_d_ci_lower, cohens_d_ci_upper, bf10) %>%
mutate(reportable_result = paste0("M = ", round(mean_reference, 2), ", M = ", round(mean_comaprison, 2), ", t(", round(df, 2), ") = ", round(t, 2), ", p ", apa_p_value(p), ", d = ", round(cohens_d, 2), ", 95% CI [", round(cohens_d_ci_lower, 2), ", ", round(cohens_d_ci_upper, 2), "], BF10 = ", round(bf10, 1)))
return(results)
}
OR_to_d <- function(OR){
log(OR)*(sqrt(3)/pi)
}
# DATA EXCLUSIONS
# full data
data_processed <-
read_csv("C:/Users/Sean/Desktop/git/DF-Impression-Formation--Video-and-Audio-/Experiment 5/2. Data/processed/data_processed.csv")%>%
# set factor levels for experimental condition (pos vs. neg video) and video type (genuine vs. deepfaked)
mutate(experiment_condition = fct_relevel(experiment_condition,
"positive video",
"negative video")) %>%
mutate(video_type = fct_relevel(video_type,
"genuine video",
"deepfake video")) %>%
# create an exclusion variable for IAT data
mutate(exclude_iat = ifelse(complete_iat_data == "complete" & passed_iat_performance == TRUE,
FALSE, TRUE),
# if exclude variable is missing, then exclude
exclude_iat = ifelse(is.na(exclude_iat), TRUE, exclude_iat)) %>%
# create exclusion variable for missing exploratory question data
mutate(exclude_exploratory = ifelse(is.na(memory_of_video_content), TRUE,
ifelse(is.na(diagnosticity_question), TRUE,
ifelse(is.na(demand), TRUE,
ifelse(is.na(reactance), TRUE,
ifelse(is.na(hypothesis_awareness), TRUE,
ifelse(is.na(influence_awareness), TRUE,
ifelse(is.na(deepfake_video_check), TRUE, FALSE)))))))) %>%
#create compound exclusion criteria
mutate(exclude = exclude_iat + exclude_exploratory)
# remove missing data
data_processed_after_exclusions <- data_processed %>%
filter(exclude == 0)
# Write file to disk for hand scoring of open ended questions
write_xlsx(data_processed_after_exclusions, "results/data_processed_after_exclusions.xlsx")
# Import file after hand scoring of open ended questions
data_processed_after_hand_scoring <- read_xlsx("results/Data_Cleaned_Recoded.xlsx") %>%
select(-...1)
names(data_processed_after_hand_scoring)
data_processed_after_hand_scoring <- data_processed_after_hand_scoring %>%
filter(influence_awareness == "No" & deepfake_video_check_recoded == 0)
# Import file after hand scoring of open ended questions
data_processed_after_hand_scoring <- read_xlsx("results/Data_Cleaned_Recoded.xlsx") %>%
select(-...1)
sean <- data_processed_after_hand_scoring %>%
filter(influence_awareness_recoded == "No" & deepfake_video_check_recoded == 0)
sean <- data_processed_after_hand_scoring %>%
distinct(influence_awareness_recoded, deepfake_video_check_recoded)
View(sean)
sean <- data_processed_after_hand_scoring %>%
filter(influence_awareness_recoded == "No" & deepfake_video_check_recoded == "Yes")
View(sean)
